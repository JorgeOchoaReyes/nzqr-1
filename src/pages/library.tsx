/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { Button, Modal, TextField } from "@mui/material";
import type { Vision } from "@prisma/client";
import Head from "next/head"; 
import { ViewVisionCard } from "~/components/Card/VisionViewCard";
import React from "react"; 
import { api } from "~/utils/api";
import { Box } from "@mui/material";

import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { TimePicker } from "@mui/x-date-pickers/TimePicker";
import { AdapterMoment } from "@mui/x-date-pickers/AdapterMoment";
import moment from "moment-timezone";
import { LoadingButton } from "@mui/lab";

const style = {
  position: "absolute" as const,
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 400, 
  boxShadow: 24,
  borderRadius: 10,
  p: 3,
};

export default function Home() { 
  const [visions, setVisions] = React.useState<Vision[] | undefined>(undefined); 
  const [open, setOpen] = React.useState(false);
  const [error, setError] = React.useState<string | undefined>(undefined);
  const [newVision, setNewVision] = React.useState<Pick<Vision, "name" | "url" | "timeOfDay">>({ 
    name: "",
    url: "",
    timeOfDay: "12:00 AM"
  });

  const getVisions = api.vision.readAll.useQuery();
  const createvision = api.vision.create.useMutation(); 
  const deleteVision = api.vision.delete.useMutation();

  const handleOpen = () => setOpen(true);
  const handleClose = () =>{
    setNewVision({
      name: "",
      url: "",
      timeOfDay: "12:00 AM"
    }); 
    setOpen(false);
  };

  const handleSaveVision = async () => {
    if(!newVision.name || !newVision.url || !newVision.timeOfDay) {
      setError("All fields are required");
      return;
    };
    if(newVision.url.indexOf("http") === -1) {
      setError("URL must contain http or https");
      return;
    } else if(newVision.name === "" || newVision.url === "" || newVision.timeOfDay === "") {
      setError("All fields are required");
      return;
    }

    await createvision.mutateAsync(newVision);
    await getVisions.refetch();
    setError(undefined);
    handleClose();
  };

  React.useEffect(() => {
    if(getVisions.data) {
      setVisions(getVisions.data);
    }
  }, [getVisions.data]);

  return (
    <>
      <Head>
        <title>Vision</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen flex-col">  
        <Box onClick={handleOpen} sx={{
          alignSelf: "end",
          m: 5,
          width: {
            md: "200px"
          }
        }} className="btn btn-primary" > 
        Create Vision
        </Box>
        <Box sx={{
          display: "flex",
          flexWrap: "wrap",
          justifyContent: "center",
          width: "100%"
        }}>
          {
            visions?.map((vision) => {
              return (
                <ViewVisionCard 
                  key={vision.id}
                  name={vision.name}
                  url={vision.url}
                  id={vision.id}
                  deleteMutation={async (id) =>{
                    await deleteVision.mutateAsync({
                      id: id
                    });
                    await getVisions.refetch();
                    return;
                  }}
                  loading={deleteVision.isLoading}
                  timeOfDay={vision.timeOfDay} />
              );
            })
          }
        </Box>
      </main>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Box sx={style} className="bg-slate-400">
          <h3 className="font-bold text-lg text-black">New Vision</h3>
          <TextField  variant="standard"
            color="secondary"
            value={newVision.name}
            required
            placeholder="Name"
            onChange={(e) => {
              setNewVision({
                ...newVision,
                name: e.target.value
              });
            }}
            sx={{
              color: "white",
              width: "70%",
              m: 1
            }} />
          <TextField variant="standard"
            color="secondary"
            value={newVision.url}
            required
            placeholder="URL"
            onChange={(e) => {
              setNewVision({
                ...newVision,
                url: e.target.value
              });
            }}
            sx={{
              color: "white",
              width: "70%",
              m: 1
            }} />
          <LocalizationProvider dateAdapter={AdapterMoment}> 
            <TimePicker 
              sx={{ m: 1 }}
              value={moment(newVision.timeOfDay, "hh:mm a")} 
              onChange={(e) => {
                if(!e) return;
                setNewVision({
                  ...newVision,
                  timeOfDay: (e?.format("HH:mm") || "")
                });
              }} 
              label="Basic time picker" /> 
          </LocalizationProvider> 
          <p className="text-red-500">{error}</p>
          <Box sx={{
            display: "flex",
            justifyContent: "flex-end",
            width: "100%"
          }}> 
            <LoadingButton onClick={handleClose} className="btn mx-2 px-10 mt-4 btn-error" >Cancel</LoadingButton>  
            <LoadingButton loading={createvision.isLoading} onClick={handleSaveVision} className="btn mx-2 px-10 mt-4 btn-success" >Save</LoadingButton> 
          </Box>
        </Box>
      </Modal>
    </>
  );
}
